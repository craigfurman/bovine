// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	"github.com/craigfurman/bovine/web"
)

type FakeWordCounter struct {
	CountStub        func(word string, since time.Time) (uint, error)
	countMutex       sync.RWMutex
	countArgsForCall []struct {
		word  string
		since time.Time
	}
	countReturns struct {
		result1 uint
		result2 error
	}
}

func (fake *FakeWordCounter) Count(word string, since time.Time) (uint, error) {
	fake.countMutex.Lock()
	fake.countArgsForCall = append(fake.countArgsForCall, struct {
		word  string
		since time.Time
	}{word, since})
	fake.countMutex.Unlock()
	if fake.CountStub != nil {
		return fake.CountStub(word, since)
	} else {
		return fake.countReturns.result1, fake.countReturns.result2
	}
}

func (fake *FakeWordCounter) CountCallCount() int {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	return len(fake.countArgsForCall)
}

func (fake *FakeWordCounter) CountArgsForCall(i int) (string, time.Time) {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	return fake.countArgsForCall[i].word, fake.countArgsForCall[i].since
}

func (fake *FakeWordCounter) CountReturns(result1 uint, result2 error) {
	fake.CountStub = nil
	fake.countReturns = struct {
		result1 uint
		result2 error
	}{result1, result2}
}

var _ web.WordCounter = new(FakeWordCounter)
